
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity cronometru is
    Port ( clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
			  stop : in STD_LOGIC;
           anode : out std_logic_vector(3 downto 0);
			  segments : out std_logic_vector (6 downto 0)
           );
end cronometru;

architecture cronometru of cronometru is

signal 	clk1 : std_logic :='0';
signal 	count : integer :=1;
signal 	div    :  std_logic_vector(22 downto 0);
signal 	alegereDisplay	:	std_logic_vector(1 downto 0);
signal 	digit1: INTEGER := 0;
signal 	digit2: INTEGER := 0;
signal 	digit3: INTEGER := 0;
signal 	digit4: INTEGER := 0;
signal 	digit5: INTEGER := 0;
signal 	digit6: INTEGER := 0;

type display_ROM is array (0 to 9) of std_logic_vector (6 downto 0);
constant convert_to_segments : display_ROM :=
		("1000000","1111001","0100100","0110000","0011001","0010010","0000010",
		 "1111000","0000000","0010000"); -- numerele 0,1,2,3...9


begin
 
PROCESS(clk1, reset)
 
 BEGIN
 
 IF (reset='1') THEN
 digit1 <= 0;
 digit2 <= 0;
 digit3 <= 0;
 digit4 <= 0;
 digit5 <= 0;
 digit6 <= 0;
 
 ELSIF (rising_edge(clk1) and stop= '0') THEN
 digit1 <= digit1 + 1;    --milisecunde
 IF (digit1=9) THEN
 digit1 <= 0;
 digit2 <= digit2 + 1;    --secunde
 IF (digit2=9) THEN
 digit2 <= 0;
 digit3 <= digit3 + 1;    -- secunde
 IF (digit3=5) THEN       --59 secunde, trecerea spre un minut
 digit3 <= 0;
 digit4 <= digit4 + 1;    --minute
 IF (digit4=9) THEN
 digit4 <= 0;
 digit5 <= digit5 + 1;
 IF (digit5=9) THEN
 digit5 <=0;
 digit6 <= digit6 + 1;
 if (digit6=3) then 
 digit1 <= 0;
 digit2 <= 0;
 digit3 <= 0;
 digit4 <= 0;
 digit5 <= 0;
 digit6 <= 0;
END IF; END IF; END IF; END IF; END IF; END IF; END IF; 

 
END PROCESS;
 
 
div<= div + 1 when rising_edge(clk);
alegereDisplay <= div(16 downto 15);

process(clk)
begin
 
 
		if rising_edge(clk) then
		count <=count+1;             -- numaratorul numara atata timp cat avem fron crescator
		if(count = 2500000) then	  -- cand numaratorul ajunge la 2.5 mil(pentru ca jumatate din perioada sa stea pe high) count-ul trece inapoi pe 1 si se opreste tactul
			clk1 <= not clk1;
			count <=1;
		end if;
		end if;
	
		if rising_edge(clk) then
		
		if alegereDisplay ="11" then
			segments <= convert_to_segments(digit4); -- 0
			anode<="0111";
		elsif alegereDisplay ="10" then
			segments <= convert_to_segments(digit3); -- 1
			anode<="1011";
		elsif alegereDisplay ="01" then
			segments <= convert_to_segments(digit2); -- 2
			anode<="1101";
		else
			segments <= convert_to_segments(digit1); -- 3
			anode<="1110";
		end if;
		

		
	else null;
	end if;
	
	
end process;
end cronometru;

